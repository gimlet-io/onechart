suite: test deployment
templates:
  - deployment.yaml
  - configmap.yaml
  - pvc.yaml
tests:
  - it: Should mount volume
    set:
      volumes:
        - name: data
          path: /var/lib/1clickinfra/data
          size: 10Gi
          storageClass: default
    asserts:
      - equal:
          path: spec.template.spec.containers[0].volumeMounts
          value:
            - name: data
              mountPath: /var/lib/1clickinfra/data
  - it: Should reference volume
    set:
      volumes:
        - name: data
          path: /var/lib/1clickinfra/data
          size: 10Gi
          storageClass: default
    asserts:
      - equal:
          path: spec.template.spec.volumes
          value:
            - name: data
              persistentVolumeClaim:
                claimName: RELEASE-NAME-data
  - it: Should recreate to avoid stuck deployments
    set:
      volumes:
        - name: data
          path: /var/lib/1clickinfra/data
          size: 10Gi
          storageClass: default
    asserts:
      - equal:
          path: spec.strategy.type
          value: Recreate
  - it: Should strategy take precedence
    set:
      volumes:
        - name: data
          path: /var/lib/1clickinfra/data
          size: 10Gi
          storageClass: default
      strategy: RollingUpdate
    asserts:
      - equal:
          path: spec.strategy.type
          value: RollingUpdate
  - it: Should strategy be set
    set:
      strategy: Dummy
    asserts:
      - equal:
          path: spec.strategy.type
          value: Dummy
  - it: Should use the existing claim
    set:
      volumes:
        - name: data
          path: /var/lib/1clickinfra/data
          existingClaim: my-static-claim
    asserts:
      - equal:
          path: spec.template.spec.volumes
          value:
            - name: data
              persistentVolumeClaim:
                claimName: my-static-claim
  - it: Should use emptyDir
    set:
      volumes:
        - name: data
          path: /var/lib/1clickinfra/data
          emptyDir: true
    asserts:
      - equal:
          path: spec.template.spec.volumes
          value:
            - name: data
              emptyDir: {}
  - it: Should use hostPath
    set:
      volumes:
        - name: data
          path: /var/lib/1clickinfra/data
          hostPath:
            path: /somewhere/over/the/rainbow
            type: DirectoryOrCreate
    asserts:
      - equal:
          path: spec.template.spec.volumes
          value:
            - name: data
              hostPath:
                path: /somewhere/over/the/rainbow
                type: DirectoryOrCreate
  - it: Should use hostPath without type
    set:
      volumes:
        - name: data
          path: /var/lib/1clickinfra/data
          hostPath:
            path: /somewhere/over/the/rainbow
    asserts:
      - equal:
          path: spec.template.spec.volumes
          value:
            - name: data
              hostPath:
                path: /somewhere/over/the/rainbow
  - it: Should use emptyDir
    set:
      volumes:
        - name: myScratchDisk
          path: /randomPath
          emptyDir: true
    asserts:
      - equal:
          path: spec.template.spec.volumes
          value:
            - name: myScratchDisk
              emptyDir: {}
      - equal:
          path: spec.template.spec.containers[0].volumeMounts
          value:
            - name: myScratchDisk
              mountPath: /randomPath
  - it: Should use a configMap
    set:
      volumes:
        - existingConfigMap: my-configmap
          name: volume-name
          path: /randomPath/app.conf
          subPath: app.conf
    asserts:
      - equal:
          path: spec.template.spec.volumes
          value:
            - name: volume-name
              configMap:
                name: my-configmap
      - equal:
          path: spec.template.spec.containers[0].volumeMounts
          value:
            - name: volume-name
              mountPath: /randomPath/app.conf
              subPath: app.conf
  - it: Should use a configmap with custom value
    set:
      volumes:
        - name: volume-name
          fileName: myfile.conf
          fileContent: |
              blablabla
              bla
          path: /randomPath/myfile.conf
          subPath: myfile.conf
    asserts:
      - equal:
          path: spec.template.spec.volumes
          value:
            - name: volume-name
              configMap:
                name: release-name-volume-name
      - equal:
          path: spec.template.spec.containers[0].volumeMounts
          value:
            - name: volume-name
              mountPath: /randomPath/myfile.conf
              subPath: myfile.conf
  - it: Should mount a volume only for the init container
    set:
      initContainers:
        - name : pod
      volumes:
        - name: init-volume
          path: /data
          emptyDir: true
    asserts:
      - equal:
          path: spec.template.spec.volumes
          value:
          - name: init-volume
            emptyDir: {} 
      - equal: 
          path: spec.template.spec.initContainers[0].volumeMounts
          value:
          - name: init-volume
            mountPath: /data 
      - notEqual:
          path: spec.template.spec.containers[0].volumeMounts
          value:
          - name: init-volume
            emptyDir: {}
  - it: Should mount a shared volume between the main container and the init container
    set:
      initContainers:
        - name: pod
      volumes:
        - name: shared-volume
          path: /data
          emptyDir: true
    asserts:
      - equal: 
          path: spec.template.spec.initContainers[0].volumeMounts
          value:
          - name: shared-volume
            mountPath: /data
      - equal: 
          path: spec.template.spec.containers[0].volumeMounts
          value:
          - name: shared-volume
            mountPath: /data      
